syntax = "proto3";
package raft;

service Raft {
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse);
  rpc RequestVote (VoteRequest) returns (VoteResponse);
  rpc PerformAction (PerformActionRequest) returns (PerformActionResponse);
}

message AppendEntriesRequest {
  // leader's term
  uint32 term = 1;
  // so follower can redirect clients
  uint32 leader_id = 2;
  // index of log entry immediately preceding new ones
  uint64 prev_log_index = 3;
  // term of prevLogIndex entry
  uint32 prev_log_term = 4;
  // log entries to store (empty for heartbeat; may send more 
  // than one for efficiency)
  repeated bytes entries = 5;
  // leader's commitIndex
  uint64 leader_commit = 6;
}

message AppendEntriesResponse {
  // currentTerm, for leader to update itself
  uint32 term = 1;
  // true if follower contained entry matching prevLogIndex and prevLogTerm
  bool success = 2;
}

message VoteRequest {
  // candidate's term
  uint32 term = 1;
  // candidate requesting vote
  uint32 candidate_id = 2; // TODO: Perhaps can be taken from rpc metadata
  // index of candidate's last log entry
  uint64 last_log_index = 3;
  // term of candidate's last log entry
  int32 last_log_term = 4;
}

message VoteResponse {
  // currentTerm, for candidate to update itself
  uint32 term = 1;
  // true means candidate received vote
  bool vote_granted = 2;
}

message PerformActionRequest {
  // action to perform
  bytes action = 1;
}

message PerformActionResponse {
  // the action was successful or not; if not, redirect request to 
  // leader. Leader Id follows
  bool success = 1;
  // Leader ID
  uint32 leader_id = 2;
}